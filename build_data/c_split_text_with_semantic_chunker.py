"""
This module is used for interacting with a Neo4j database. It reads news
articles from the database, splits the text of the articles into semantic
chunks using the SemanticChunker from the langchain_experimental library
and the OpenAIEmbeddings from the langchain_openai library, and then writes
the split text back into the database.

The module uses the neo4j GraphDatabase driver for database connectivity.
The connection parameters (URI, username, and password) are retrieved from
the Streamlit secrets.

The read_data function is used to read data from the database. It returns a list
of news article body text and ids.

The write_data function is used to write the split text back into the database.
It takes as arguments the Neo4j transaction object, the ID of the split, the
split text, the element ID for the Neo4j 'News' node that the body text is saved
to, and the URL of the news article.

The module also handles exceptions related to service availability and
authentication, and logs any  unexpected errors that occur during execution.
"""

import logging
import streamlit as st

from langchain_experimental.text_splitter import SemanticChunker
from langchain_openai.embeddings import OpenAIEmbeddings
from neo4j import GraphDatabase


# Set variables for Neo4j driver
SECRETS = "secrets.toml"
uri = st.secrets["NEO4J_URI"]
username = st.secrets["NEO4J_USERNAME"]
password = st.secrets["NEO4J_PASSWORD"]


def read_data(tx):
    """
    Read data from Neo4j database.

    Args:
        tx: Neo4j transaction object.

    Returns:
        A list of news article body text and ids.
    """
    read_data_result = tx.run(
        """
        MATCH (n:News WHERE n.body IS NOT NULL)
        WHERE NOT EXISTS( (n)<-[:CHILD_OF]-(:SplitText) )
        RETURN n.id, n.body, elementId(n) As elementId, n.headline_name
        """
    )
    return [
        (
            record["n.id"],
            record["n.body"],
            record["elementId"],
            record["n.headline_name"],
        )
        for record in read_data_result
    ]


def write_data(tx, split_id, split_text, split_source, split_url):
    """
    Write data to Neo4j database.

    Args:
        tx: Neo4j transaction object.
        split_id: The ID of the split.
        split_text: The text generated by the splitter.
        split_source: The element ID for the Neo4j 'News' node that the body text is saved to.
        split_url: The URL of the news article.
    """
    tx.run(
        """
        MATCH (n:News)
        WHERE elementId(n) = $split_source
        MERGE (n)<-[:CHILD_OF]-(ct:SplitText {
                                                split_id: $split_id,
                                                split_text: $split_text,
                                                split_source: $split_source,
                                                split_url: $split_url
                                            }
                                )
        SET n.url = $split_url
        """,
        split_id=split_id,
        split_text=split_text,
        split_source=split_source,
        split_url=split_url,
    )
    return


# Create the driver instance for reading data
DRIVER = None
try:
    DRIVER = GraphDatabase.driver(uri, auth=(username, password))
    DRIVER.verify_connectivity()
    with DRIVER.session() as session:
        results = session.execute_read(read_data)
        print("Data read")

except Exception as e:
    logging.error("An unexpected error occurred: %s", e)

# Close the driver instance
DRIVER.close()
print("Driver closed")

text_splitter = SemanticChunker(OpenAIEmbeddings())

# Loop through results
for result in results:
    id, body, elementId, headline_name = result
    texts = text_splitter.create_documents([body])

    for index, text in enumerate(texts):
        split_id = f"{id}_{index}"
        SPLIT_TEXT = (
            str(text)
            .replace("page_content='", "")
            .replace('page_content="', "")
            .replace(r"\n", " ")
            .replace(r"\xa0", " ")
            .replace(r"\'s", "'s")
            .strip()
        )
        # Remove the last character
        SPLIT_TEXT = SPLIT_TEXT[:-1]
        split_source = elementId
        headline_name = headline_name.lower().replace("/", "-").replace(" ", "-")
        split_url = f"https://www.londonstockexchange.com/news-article/BRCS/{headline_name}/{id}"

        # Create the driver instance for writing data
        DRIVER = None
        try:
            DRIVER = GraphDatabase.driver(uri, auth=(username, password))
            DRIVER.verify_connectivity()
            with DRIVER.session() as session:
                session.execute_write(
                    write_data,
                    split_id,
                    SPLIT_TEXT,
                    split_source,
                    split_url,
                )
                print("Data written")

        except Exception as e:
            logging.error("An unexpected error occurred: %s", e)

# Close the driver instance
DRIVER.close()
print("Driver closed")
