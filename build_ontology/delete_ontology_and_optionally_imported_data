import logging
import streamlit as st
from neo4j import GraphDatabase


# Set variables for Neo4j driver
secrets = "secrets.toml"
uri = st.secrets["NEO4J_URI"]
username = st.secrets["NEO4J_USERNAME"]
password = st.secrets["NEO4J_PASSWORD"]


def delete_imported_ontology(tx):
    """
    Deletes all imported ontology resources from the database.

    Parameters:
    - tx: The transaction object for executing the Cypher query.

    Returns:
    None
    """
    tx.run(
        """MATCH
        (r1:Resource where not r1.uri STARTS WITH 'http://d')
        -[*..1]->
        (r2:Resource where not r2.uri STARTS WITH 'http://d' or not r2.uri STARTS WITH 'https://permid.org/')
        detach delete r1, r2;
        """
    )
    return None


def delete_merged_ontology(tx):
    """Deletes the merged ontology by removing all relationships
    and nodes that are connected to the 'News' node.

    Args:
        tx: The transaction object used for executing the Cypher query.

    Returns:
        None
    """
    tx.run(
        """
    MATCH (n:News)<-[r]-(o)
    WHERE type(r) IN ["TAG_OF", "PERSON_OF", "ORGANISATION__OF", "INDUSTRY_OF", "COMPANY_OF", "POSITION_OF"]
    DETACH DELETE o;
    """
    )
    return None


# def drop_all_onotology_constraints_and_indexes(tx):
#     """
#     Drop all onotology constraints and indexes in the Neo4j database.
#     """
#     # Get all constraints
#     constraints = tx.run("SHOW CONSTRAINTS").data()
#     # Drop each constraint
#     for constraint in constraints:
#         tx.run(f"DROP CONSTRAINT {constraint['name']}")

#     # Get all indexes
#     indexes = tx.run("SHOW INDEXES").data()
#     # Drop each index, except for indexes of type "LOOKUP"
#     for index in indexes:
#         if index["type"] != "LOOKUP":
#             tx.run(f"DROP INDEX {index['name']}")


# Ask the user whether to delete all nodes and relationships
delete_data = input("Delete all nodes and relationships? (yes/no) ") == "yes"

# Import the drop_all_constraints_and_indexes function
# Create the driver instance
driver = None
try:
    driver = GraphDatabase.driver(uri, auth=(username, password))
    with driver.session() as session:
        if delete_data:
            # Delete all nodes and relationships in a separate transaction
            session.execute_write(delete_imported_ontology)
        # Call the drop_all_constraints_and_indexes function
        # session.execute_write(drop_all_constraints_and_indexes)

except Exception as e:
    logging.error(f"Failed to create Neo4j driver: {e}")
finally:
    if driver is not None:
        driver.close()
